@charset "utf-8";

/* CSS Document */
html, body {
    margin: 0px;
    width: 100%;
    background: #fff;
    -webkit-font-smoothing: antialiased;
}

html body {
    margin: 0;
    padding: 0;
    width: 100%;
    font-size: 13px;
}

#main_body, .main_center {
    width: 950px;
    margin-left: auto;
    margin-right: auto;
    text-align: left;
}

ul, ol, h1, h2, h3, h4, h5, p {
    margin: 0px;
    padding: 0px;
    font-weight: 100;
}

li {
    list-style: none;
}

dl, dd {
    margin: 0;
}

/*省略号*/
.addDian {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    word-wrap: normal;
}

.clear {
    clear: both;
}

/*零宽度空格*/
.clearfix:after, .clearfix:before {
    content: "\200B";
    display: block;
    height: 0;
    line-height: 0;
    clear: both;
}

.clearfix {
    *zoom: 1;
}

/*图片衔接去除边框*/
a.a_img {
    outline: none;
    color: #EEEBEE;
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

a.a_img img {
    display: block;
    width: 100%;
    height: 100%;
}

img {
    border: 0;
}

a {
    cursor: pointer;
    text-decoration: none;
    color: inherit;
}

a[target="_blank"] {
    cursor: alias;
}

a.black {
    color: #333;
}

a.c_h:hover {
    color: #b57e23 !important;
}

a:hover {
    text-decoration: underline;
}

/*表格*/
table {
    border-spacing: 0;
    border-collapse: collapse;
}

.inline_block {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

.span_icon, .span_text {
    display: inline-block;
    *display: inline;
    *zoom: 1;
    vertical-align: middle;
}

.layout_float_wrap:after, .layout_wrap:before {
    content: "\200B";
    display: block;
    height: 0;
    line-height: 0;
    clear: both;
}

.layout_float_wrap {
    *zoom: 1;
}

.layout_float_wrap {
    .layout_float_left {
        float: left;
    }
    .layout_float_right {
        float: right;
    }
}

.p_a {
    display: block;
    text-align: left;
    width: 100%;
}

/*sass函数*/
@mixin sanjiao($width) {
    　　border-width: $width;
    border-color: transparent;
    border-style: solid;
    display: inline-block;
    text-indent: -100px;
    *display: inline;
    *zoom: 1;
    content: "";
}

@mixin jianbian($start, $stop) {
    filter: progid:DXImageTransform.Microsoft.gradient(startcolorstr=#{$start}, endcolorstr=#{$stop}, gradientType=0);
    background: linear-gradient($start, $stop);
    background: -webkit-linear-gradient($start, $stop);
    background: -o-linear-gradient($start, $stop);
    background: -ms-linear-gradient($start, $stop);
}

@mixin jianbian_shuiping($start, $stop) {
    filter: progid:DXImageTransform.Microsoft.gradient(startcolorstr=#{$start}, endcolorstr=#{$stop}, gradientType=1);
    background: linear-gradient(45deg, $start, $stop);
    background: -webkit-linear-gradient(45deg, $start, $stop);
    background: -o-linear-gradient(45deg, $start, $stop);
    background: -ms-linear-gradient(45deg, $start, $stop);
}

@mixin weiruan_yahei {
    font-family: "Helvetica Neue",Helvetica,"Hiragino Sans GB","Segoe UI","Microsoft Yahei",Tahoma,Arial,STHeiti,sans-serif;
}

@mixin font_heiti {
    font-family: SimHei, \9ED1\4F53;
}

@mixin background_rgba($r, $g, $b, $opacity) {
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#{ie-hex-str(rgba($r, $g, $b, $opacity))}, endColorstr=#{ie-hex-str(rgba($r, $g, $b, $opacity))});
    background: rgba($r, $g, $b, $opacity);
}

@mixin bro_prefix($property, $value) {
    #{$property}: #{$value};
    -webkit-#{$property}: #{$value};
    -moz-#{$property}: #{$value};
    -ms-#{$property}: #{$value};
    -o-#{$property}: #{$value};
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @-o-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

@mixin pro_prefix($property, $value) {
    #{$property}: #{$value};
    #{$property}: -webkit-#{$value};
    #{$property}: -moz-#{$value};
    #{$property}: -ms-#{$value};
    #{$property}: -o-#{$value};
}

@mixin opacity($value) {
    filter: alpha(opacity = 100 * $value);
    opacity: $value;
}